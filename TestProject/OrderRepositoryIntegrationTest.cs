using Entities;
using Repositories;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TestProject;

namespace tests
{
    public class OrderRepositoryIntegrationTest : IClassFixture<DatabaseFixture>
    {
        private readonly ComputersContext _dbContext;
        private readonly OrderRepository _orderRepository;

        public OrderRepositoryIntegrationTest(DatabaseFixture databaseFixture)
        {
            _dbContext = databaseFixture.Context;
            _orderRepository = new OrderRepository(_dbContext);
        }
        [Fact]
        public async Task Add_ValidOrder_ReturnsOrder()
        {
            // Arrange
            var user = new User { Email = "testuser@example.com", Password = "Password", FirstName = "Test", LastName = "User" };
            await _dbContext.Users.AddAsync(user);
            await _dbContext.SaveChangesAsync();

            var order = new Order
            {
                OrderDate = DateTime.Now,
                OrderSum = 100,
                UserId = user.UserId // Foreign key reference to the existing user
            };

            // Act
            var addedOrder = await _orderRepository.Add(order);

            // Assert
            Assert.NotNull(addedOrder);
            Assert.Equal(order.OrderDate, addedOrder.OrderDate);
            Assert.Equal(order.OrderSum, addedOrder.OrderSum);
            Assert.Equal(order.UserId, addedOrder.UserId);
            Assert.NotEqual(0, addedOrder.OrderId); // Ensures OrderId was generated by the database

            // Clean up
            _dbContext.Orders.Remove(addedOrder);
            _dbContext.Users.Remove(user);
            await _dbContext.SaveChangesAsync();
        }

    }
}
